#!/usr/bin/env node
var winston = require('winston');
var yargs = require("yargs")
	.usage("Usage: $0 [build|pluginify] --main app --config path/to/stealconfig.js")
	.demand(["config", "main"])
	.describe("config", "Path to the config file")
	.describe("main", "The application's entry point module")
	.describe("dist-dir", "Defaults to dist/, a directory to save the bundles")
	.describe("bundle-steal", "Include steal.js in your main bundled JavaScript")
	.describe("ignore", "For pluginify, a comma-separated list of modules to not include in the output")
	.describe("out", "For pluginify, specify an output file")
  .describe("verbose", "Verbose output")
  .describe("quiet", "Quiet output")
	.check(function(argv){
		var command = argv._[0];

		if(!command) {
			throw "Must provide a command to execute";
		}

		if(command !== "build" && command !== "pluginify") {
			throw "Unknown command: " + command;
		}

		if(command === "pluginify" && !argv.out) {
			throw "When using pluginify, must specify an out file";
		}

	});

// The command-line arguments
var argv = yargs.argv;

// Determine the location of the config file
var config = argv.config[0] === "/" ?
	argv.config : (process.cwd() + "/" + argv.config);


// Which command to run, either `build` or `pluginify`
var command = argv._[0];

// Load steal-tools
var stealTools = require("../index");

if(command === "build"){

	return build();

} else if(command === "pluginify") {

	return pluginify();

}

function build() {

	stealTools.build({
		config: config,
		main: argv.main
	}, {
		verbose: argv.verbose,
		quiet: argv.quiet,
		bundleSteal: argv.bundleSteal,
		distDir: argv.distDir,
	}).then(function(){
		winston.info('\nBuild completed successfully'.green);
	});

}

function pluginify() {
	var fs = require("fs");
	var ignore = [];

	// ignore would be a comma-separated list like jquery,underscore,moment
	if(argv.ignore) {
		ignore = argv.ignore.split(",");
	}

	stealTools.pluginifier({
		config: config,
		main: argv.main
	}, {
		verbose: argv.verbose,
		quiet: argv.quiet
	}).then(function(pluginify){

		var content = pluginify(null, {
			ignore: ignore
		});

		// Write out the contents
		fs.writeFileSync(argv.out, content, "utf8");
	});

}
